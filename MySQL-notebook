
创建数据库   create   database   _name

删除数据库   drop  database   _name

选择数据库   use  _name



创建MySQL表    create  table  _name  (column_name  column_type)
create table tutorials_tbl(
   tutorial_id INT NOT NULL AUTO_INCREMENT,
   tutorial_title VARCHAR(100) NOT NULL,
   tutorial_author VARCHAR(40) NOT NULL,
   submission_date DATE,
   PRIMARY KEY ( tutorial_id )
);


字段使用NOT NULL属性，是因为我们不希望这个字段的值为NULL。 因此，如果用户将尝试创建具有NULL值的记录，那么MySQL会产生错误。


字段的AUTO_INCREMENT属性告诉MySQL自动增加id字段下一个可用编号。


关键字PRIMARY KEY用于定义此列作为主键。可以使用逗号分隔多个列来定义主键。



删除MySQL表     drop table _name
MySQL插入数据    insert into _name  (field1, field2, ...fieldN)
			values
			(value1, value2,....valueN);




MySQL SELECT 查询   
	SELECT field1, field2,...fieldN table_name1, table_name2...
	[WHERE Clause]
	[OFFSET M ][LIMIT N]
	可以使用分隔的一个或多个逗号从多个表，以及使用WHERE子句包括各种条件，但WHERE子句是SELECT命令的可选部分
	可以在一个SELECT命令指定读取一个或多个字段
	可以指定星号(*)代替选择的字段。在这种情况下，将返回所有字段
	可以指定任意的条件在 WHERE 子句后面
	可以使用OFFSET指定一个偏移量，SELECT从那里开始返回记录。默认情况下 offset 的值是 0
	可以使用LIMIT属性限制返回的数量




	SELECT field1, field2,...fieldN table_name1, table_name2...
	[WHERE condition1 [AND [OR]] condition2.....
	可以使用逗号分隔一个或多个表，以及WHERE子句包括各种条件，但WHERE子句只是SELECT命令的可选部分
	可以指定使用任何条件在WHERE子句中
	可以指定一个以上的条件在使用AND或OR运算符中
	WHERE子句可以用DELETE 或 UPDATE的SQL命令一起，也可以指定一个条件使用。



MySQL update 更新数据
	UPDATE table_name SET field1=new-value1, field2=new_value2
	[WHERE Clause]
	可以更新一个或多个字段
	可以指定使用任何条件在where语句中
	可以一次更新一个表中的值



MySQL delete  删除数据
	DELETE　FROM   table_name   [WHERE Clause]
	如果where子句没有指定，则所有MySQL表中的记录将被删除
	可以指定使用任何条件在where中
	可以一次删除一个表中的所有记录



MySQL Like  子句
	SELECT field1, field2,...fieldN table_name, table_name2...
	WHERE field1 LIKE condition1 [AND [or]] field2 = '[%]somevalue'
	可以指定使用任何条件在WHERE子句中
	可以使用LIKE子句在WHERE子句中
	可以使用LIKE子句代替等号（=）
	当LIKE连同%符号使用，那么它就会像一个元字符的搜索
	可以指定一个以上的条件使用AND或OR运算符
	WHERE...LIKE子句可以使用SQL命令的DELETE或UODATE，也可以指定一个条件



MySQL order by 排序
	SELECT field1, field2, ... fieldN  table_name1, table_name2...
	ORDER BY field1, [field2...] [ASC [DESC]]
	可以排序返回所列出提供的任何字段的结果
	可以在多个字段排序结果
	可以使用关键字ASC或DESC来执行升序或降序排序。默认情况下，按升序排列
	可以使用WHERE...LIKE子句以通用的方式放置条件



MySQL　join联接  .




  如果您忘记了数据库或表的名称，或给定表的结构（例如，其列被调用），该怎么办？MySQL通过几个语句来解决这个问题，提供有关它支持的数据库和表的信息。

您以前看过SHOW DATABASES，列出了由服务器管理的数据库。要查找当前选择的数据库，请使用以下 DATABASE()功能：

mysql> SELECT DATABASE();
+------------+
| DATABASE() |
+------------+
| menagerie  |
+------------+
如果还没有选择任何数据库，结果是 NULL。




要找出默认数据库包含的表（例如，当您不确定表的名称）时，请使用以下语句：

mysql> SHOW TABLES;
+---------------------+
| Tables_in_menagerie |
+---------------------+
| event               |
| pet                 |
+---------------------+




要验证您的表是按预期的方式创建的，请使用DESCRIBE语句：


mysql> DESCRIBE pet;
+---------+-------------+------+-----+---------+-------+
| Field   | Type        | Null | Key | Default | Extra |
+---------+-------------+------+-----+---------+-------+
| name    | varchar(20) | YES  |     | NULL    |       |
| owner   | varchar(20) | YES  |     | NULL    |       |
| species | varchar(20) | YES  |     | NULL    |       |
| sex     | char(1)     | YES  |     | NULL    |       |
| birth   | date        | YES  |     | NULL    |       |
| death   | date        | YES  |     | NULL    |       |
+---------+-------------+------+-----+---------+-------+
您可以随时使用DESCRIBE，例如，如果您忘记了表中列的名称或者它们具有什么类型。


DECIMAL数据类型特性

本节讨论 DECIMAL数据类型（及其同义词）的特征，具体涉及以下主题：

最大位数

存储格式

存储要求

非标准MySQL扩展到DECIMAL列 的上限

DECIMAL列 的声明语法 是 。参数值的范围如下： DECIMAL(M,D)

M是最大位数（精度）。它的范围是1到65。

D是小数点右侧的位数（比例）。它的范围是0到30，必须不大于M。

最大值为65，M表示对DECIMAL值的计算精确到65位数。精度的65位数的这个限制也适用于精确值数字文字，因此这些文字的最大范围与之前不同。

DECIMAL列的 值使用二进制格式存储，其中包含九个十进制数字到4个字节。每个值的整数和小数部分的存储要求分别确定。九位数字的每一位都需要4个字节，
剩余的剩余数字需要4个字节的一部分。剩余数字所需的存储由下表给出。

剩余数字	字节数
0	0
1-2	1
3-4	2
5-6	3
7-9	4
例如，一DECIMAL(18,9)列在小数点的任一侧有九位，因此整数部分和小数部分每个都需要4个字节。一 DECIMAL(20,6)列有十四个整数数字和六个小数位数。
整数数字对于九位数字需要四个字节，其余五位数需要3个字节。六个小数位数需要3个字节。

DECIMAL列不存储前导+字符或- 字符或前导0数字。如果插入 +0003.1到一个DECIMAL(5,1) 列，它被存储为3.1。对于负数，-不存储字面字符。

DECIMAL列不允许大于列定义隐含范围的值。例如，DECIMAL(3,0)柱支持多种-999对999。一 列至多允许- 数字到小数点的左侧。 DECIMAL(M,D)MD

SQL标准要求的精确度 是准确 数字。因为 ，标准要求至少数字的精度， 但允许更多。在MySQL中， 并且 是一样的，并且都具有精确的 数字。
NUMERIC(M,D) MDECIMAL(M,D)MDECIMAL(M,D)NUMERIC(M,D)M

有关DECIMAL值的内部格式的完整说明 ，请参阅strings/decimal.cMySQL源代码分发中的文件 。在该decimal2bin()函数中说明了格式（一个例子） 。
