2.1. pickle - Python对象序列化
源代码： Lib / pickle.py

pickle模块实现了用于对Python对象结构进行序列化和反序列化的二进制协议。
“Pickling”是将Python对象转换为字节流的过程，“unpickling”是反向操作，由此字节流二进制文件或字节对象）转换回对象结构。
酸洗（和解胶）也称为“串联”，“编组”，[1]或“压平”；然而，为了避免混淆，这里使用的术语是“pickling”和“unpickling”。

警告pickle模块对于错误或恶意构造的数据不安全。切勿从不受信任或未经身份验证的来源接收数据。
12.1.1与其他Python模块的关系
12.1.1.1.与marshal的比较
Python有一个更原始的序列化模块，称为marshal，但是一般情况下pickle应该始终是序列化Python对象的首选方法。marshal主要用于支持Python的.pyc文件。

pickle模块有以下几个重要方面不同于marshal：

pickle模块会跟踪已经序列化的对象，因此以后对同一对象的引用将不会再次序列化。marshal则不会这样做。

这对于递归对象和对象共享都有影响。递归对象是包含对自身的引用的对象。这些不是元组处理，事实上，尝试封送递归对象会导致Python解释器崩溃。
当在对象层次结构中的不同位置对同一对象进行多个引用被序列化时，将发生对象共享。pickle只存储此类对象一次，并确保所有其他引用指向主副本。
共享对象保持共享，这对可变对象非常重要。

marshal不能用于序列化用户定义的类及其实例。pickle可以透明地保存和恢复类实例，但是类定义必须是可导入的，并且存储在与存储对象时相同的模块中。

marshal序列化格式不能保证在Python版本之间可移植。
由于其生命中的主要工作是支持.pyc文件，Python实现者保留在需要时以非向后兼容的方式更改序列化格式的权利。
pickle序列化格式保证在Python版本之间向后兼容。

12.1.1.2.与json的比较
在pickle协议和JSON（JavaScript对象表示法）之间存在根本区别：

JSON是一种文本序列化格式（它输出unicode文本，虽然大多数时候它被编码为utf-8），而pickle是一个二进制序列化格式；
JSON是人类可读的，而pickle不是；
JSON是可互操作的，并且在Python生态系统之外广泛使用，而pickle是特定于Python的；
默认情况下，JSON只能表示Python内建类型的一个子集，并且没有自定义类；
pickle可以代表极大数量的Python类型（其中许多是通过巧妙地使用Python内省功能自动实现的；复杂的情况可以通过实现specific object APIs来解决）。
也可以看看json模块：允许JSON序列化和反序列化的标准库模块。
12.1.2.数据流格式
pickle使用的数据格式是特定于Python的。这具有的优点是没有由诸如JSON或XDR（其不能表示指针共享）的外部标准强加的限制；
然而这意味着非Python程序可能无法重建pickled Python对象。

默认情况下，pickle数据格式使用相对紧凑的二进制表示。如果您需要最佳大小特征，则可以有效地compress pickled数据。

模块pickletools包含用于分析pickle生成的数据流的工具。pickletools源代码对pickle协议使用的操作码有广泛的意见。

目前有5种不同的协议可以用于酸洗。使用的协议越高，更新的Python版本需要读取生产的泡菜。

协议版本0是原始的“人类可读”协议，并且向后兼容早期版本的Python。
协议版本1是一个旧的二进制格式，也与早期版本的Python兼容。
协议版本2在Python 2.3中引入。它提供new-style class更高效的酸洗。有关协议2带来的改进的信息，请参阅 PEP 307。
在Python 3.0中添加了协议版本3。它明确支持bytes对象，不能由Python 2.x取消绑定。这是默认协议，当与其他Python 3版本兼容时需要推荐的协议。
在Python 3.4中添加了协议版本4。它增加了对非常大的对象，pickling更多种类的对象和一些数据格式优化的支持。有关协议4带来的改进的信息，请参见 PEP 3154。
注意序列化是比持久化更原始的概念；虽然pickle读取和写入文件对象，但它不处理命名持久化对象的问题，也不处理对持久化对象的并发访问的问题（甚至更复杂）。
pickle模块可以将复杂对象转换为字节流，并且可以将字节流转换为具有相同内部结构的对象。
也许与这些字节流最明显的事情是将它们写入文件，但也可以通过网络发送它们或将它们存储在数据库中。
shelve模块提供了一个简单的界面，用于在DBM风格的数据库文件上对对象进行pickle和unpickle。

更多信息，查看官方文档
